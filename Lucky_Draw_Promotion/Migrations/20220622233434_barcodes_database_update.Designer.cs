// <auto-generated />
using System;
using Lucky_Draw_Promotion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lucky_Draw_Promotion.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220622233434_barcodes_database_update")]
    partial class barcodes_database_update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordChangeString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("AdminId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Email = "cooledm123@gmail.com",
                            FullName = "Nguyen Chinh Thi",
                            PasswordHash = new byte[] { 80, 60, 130, 195, 71, 188, 190, 227, 1, 121, 169, 227, 50, 126, 102, 152, 221, 196, 143, 230, 244, 195, 30, 222, 162, 205, 93, 88, 141, 184, 111, 91, 171, 150, 245, 169, 90, 160, 255, 63, 186, 92, 122, 171, 125, 10, 60, 1, 138, 107, 62, 180, 36, 23, 230, 173, 135, 10, 67, 251, 190, 53, 205, 172 },
                            PasswordSalt = new byte[] { 230, 254, 118, 100, 156, 255, 76, 51, 213, 216, 18, 22, 1, 242, 71, 133, 135, 205, 190, 26, 106, 173, 150, 183, 122, 183, 28, 155, 144, 95, 212, 97, 233, 236, 12, 37, 3, 238, 32, 220, 137, 38, 226, 93, 74, 215, 75, 185, 242, 178, 224, 7, 101, 116, 73, 146, 67, 31, 194, 105, 78, 103, 29, 230, 226, 202, 178, 7, 39, 177, 104, 3, 3, 127, 157, 23, 132, 165, 64, 39, 221, 245, 40, 81, 72, 95, 82, 53, 236, 243, 54, 99, 200, 67, 165, 136, 37, 11, 245, 61, 196, 97, 40, 17, 213, 60, 0, 81, 170, 85, 131, 60, 77, 64, 77, 242, 82, 96, 114, 46, 140, 31, 230, 72, 187, 80, 216, 23 }
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Barcode", b =>
                {
                    b.Property<int>("BarcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarcodeId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int?>("CharsetId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("CodeCount")
                        .HasColumnType("int");

                    b.Property<int>("CodeLength")
                        .HasColumnType("int");

                    b.Property<int>("CodeRedemptionLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Postfix")
                        .HasColumnType("int");

                    b.Property<int?>("Prefix")
                        .HasColumnType("int");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Scanned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScannedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Unlimited")
                        .HasColumnType("bit");

                    b.Property<bool>("UsedForSpin")
                        .HasColumnType("bit");

                    b.HasKey("BarcodeId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CharsetId");

                    b.ToTable("Barcodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"), 1L, 1);

                    b.Property<bool>("ApplyForAllCampaign")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharsetId")
                        .HasColumnType("int");

                    b.Property<int>("CodeCount")
                        .HasColumnType("int");

                    b.Property<int>("CodeLength")
                        .HasColumnType("int");

                    b.Property<int>("CodeUsageLimit")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OnlyJoinOne")
                        .HasColumnType("bit");

                    b.Property<string>("Postfix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramSizeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Unlimited")
                        .HasColumnType("bit");

                    b.HasKey("CampaignId");

                    b.HasIndex("CharsetId");

                    b.HasIndex("ProgramSizeId");

                    b.ToTable("Campaigns");

                    b.HasData(
                        new
                        {
                            CampaignId = 1,
                            ApplyForAllCampaign = false,
                            AutoUpdate = false,
                            CampaignName = "Lucky Draw 1",
                            CharsetId = 1,
                            CodeCount = 1,
                            CodeLength = 10,
                            CodeUsageLimit = 1,
                            Description = "This is for test",
                            EndDate = new DateTime(2022, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OnlyJoinOne = false,
                            Prefix = "ALTA",
                            ProgramSizeId = 1,
                            StartDate = new DateTime(2022, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Unlimited = false
                        },
                        new
                        {
                            CampaignId = 2,
                            ApplyForAllCampaign = true,
                            AutoUpdate = false,
                            CampaignName = "Lucky Draw 2",
                            CharsetId = 1,
                            CodeCount = 1,
                            CodeLength = 10,
                            CodeUsageLimit = 1,
                            Description = "This is the second test",
                            EndDate = new DateTime(2022, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OnlyJoinOne = false,
                            Prefix = "ALTA",
                            ProgramSizeId = 2,
                            StartDate = new DateTime(2022, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Unlimited = false
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Charset", b =>
                {
                    b.Property<int>("CharsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharsetId"), 1L, 1);

                    b.Property<string>("CharsetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharsetValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharsetId");

                    b.ToTable("Charsets");

                    b.HasData(
                        new
                        {
                            CharsetId = 1,
                            CharsetName = "Numbers",
                            CharsetValue = "123456789"
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TOBId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("PositionId");

                    b.HasIndex("TOBId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Block = true,
                            DateOfBirth = new DateTime(1973, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Nguyễn Hữu Huân",
                            Location = "Quận 6, TPHCM",
                            PhoneNumber = "0901456781",
                            PositionId = 1,
                            TOBId = 1
                        },
                        new
                        {
                            CustomerId = 2,
                            Block = true,
                            DateOfBirth = new DateTime(1974, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Nguyễn Trọng Hữu",
                            Location = "Quận 5, TPHCM",
                            PhoneNumber = "0907852781",
                            PositionId = 2,
                            TOBId = 2
                        },
                        new
                        {
                            CustomerId = 3,
                            Block = true,
                            DateOfBirth = new DateTime(1975, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Trần Hùng Phát",
                            Location = "Quận 7, TPHCM",
                            PhoneNumber = "0901485381",
                            PositionId = 3,
                            TOBId = 3
                        },
                        new
                        {
                            CustomerId = 4,
                            Block = true,
                            DateOfBirth = new DateTime(1976, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Lê Ngọc Anh",
                            Location = "Bến Lức, Long An",
                            PhoneNumber = "0901451981",
                            PositionId = 1,
                            TOBId = 4
                        },
                        new
                        {
                            CustomerId = 5,
                            Block = true,
                            DateOfBirth = new DateTime(1977, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Lê Phan",
                            Location = "Biên Hòa, Đồng Nai",
                            PhoneNumber = "0901742681",
                            PositionId = 2,
                            TOBId = 3
                        },
                        new
                        {
                            CustomerId = 6,
                            Block = false,
                            DateOfBirth = new DateTime(1978, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Nguyễn Thị Ngọc Hương",
                            Location = "Bến Lức, Long An",
                            PhoneNumber = "0904803457",
                            PositionId = 1,
                            TOBId = 3
                        },
                        new
                        {
                            CustomerId = 7,
                            Block = false,
                            DateOfBirth = new DateTime(1979, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Trần Văn Tình",
                            Location = "Cai Lậy, Tiền Giang",
                            PhoneNumber = "0947514514",
                            PositionId = 1,
                            TOBId = 5
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.CustomerBarcode", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("BarcodeId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "BarcodeId");

                    b.HasIndex("BarcodeId");

                    b.ToTable("CustomerBarcodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Gift", b =>
                {
                    b.Property<int>("GiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftId"), 1L, 1);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("GiftId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ProductId");

                    b.ToTable("Gifts");

                    b.HasData(
                        new
                        {
                            GiftId = 1,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2275),
                            ProductId = 1
                        },
                        new
                        {
                            GiftId = 2,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2283),
                            ProductId = 2
                        },
                        new
                        {
                            GiftId = 3,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2284),
                            ProductId = 3
                        },
                        new
                        {
                            GiftId = 4,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2285),
                            ProductId = 4
                        },
                        new
                        {
                            GiftId = 5,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2285),
                            ProductId = 5
                        },
                        new
                        {
                            GiftId = 6,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2286),
                            ProductId = 6
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.GiftCode", b =>
                {
                    b.Property<int>("GiftCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftCodeId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftId")
                        .HasColumnType("int");

                    b.HasKey("GiftCodeId");

                    b.HasIndex("GiftId");

                    b.ToTable("GiftCodes");

                    b.HasData(
                        new
                        {
                            GiftCodeId = 1,
                            Active = true,
                            ActiveDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2346),
                            Code = "ALTA231453",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2346),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 2,
                            Active = true,
                            ActiveDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2348),
                            Code = "ALTA546375",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2348),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 3,
                            Active = true,
                            ActiveDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2349),
                            Code = "ALTA111212",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2349),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 4,
                            Active = false,
                            Code = "ALTA215223",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2350),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 5,
                            Active = false,
                            Code = "ALTA512311",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2351),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 6,
                            Active = false,
                            Code = "ALTA734521",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2352),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 7,
                            Active = false,
                            Code = "ALTA346222",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2352),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 8,
                            Active = false,
                            Code = "ALTA890231",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2353),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 9,
                            Active = false,
                            Code = "ALTA888769",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2354),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 10,
                            Active = false,
                            Code = "ALTA909878",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2354),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 11,
                            Active = false,
                            Code = "ALTA999231",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2355),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 12,
                            Active = false,
                            Code = "ALTA118908",
                            CreatedDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2355),
                            GiftId = 1
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"), 1L, 1);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            PositionName = "Chủ"
                        },
                        new
                        {
                            PositionId = 2,
                            PositionName = "Quản lý"
                        },
                        new
                        {
                            PositionId = 3,
                            PositionName = "Bếp"
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductDescription = "Hạt nêm Knorr Chay Nấm Hương 400g",
                            ProductName = "Hạt nêm Knorr Chay Nấm Hương 400g"
                        },
                        new
                        {
                            ProductId = 2,
                            ProductDescription = "Hạt nêm Knorr Từ Thịt Thăn, Xương Ống & Tủy 600gr",
                            ProductName = "Hạt nêm Knorr Từ Thịt Thăn, Xương Ống & Tủy 600gr"
                        },
                        new
                        {
                            ProductId = 3,
                            ProductDescription = "Gia vị Hoàn Chỉnh Knorr Canh Chua 30g",
                            ProductName = "Gia vị Hoàn Chỉnh Knorr Canh Chua 30g"
                        },
                        new
                        {
                            ProductId = 4,
                            ProductDescription = "Xốt Nêm Knorr Đậm Đặc Từ Thịt Vị Heo 240g",
                            ProductName = "Xốt Nêm Knorr Đậm Đặc Từ Thịt Vị Heo 240g"
                        },
                        new
                        {
                            ProductId = 5,
                            ProductDescription = "Hạt Nêm Knorr Đậm Đặc Từ Thịt Thăn, Xương Ống & Tủy 900gr",
                            ProductName = "Hạt Nêm Knorr Đậm Đặc Từ Thịt Thăn, Xương Ống & Tủy 900gr"
                        },
                        new
                        {
                            ProductId = 6,
                            ProductDescription = "Knorr Natural Bột Nêm Tự Nhiên Vị Rau Củ 150g",
                            ProductName = "Knorr Natural Bột Nêm Tự Nhiên Vị Rau Củ 150g"
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.ProgramSize", b =>
                {
                    b.Property<int>("PSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PSId"), 1L, 1);

                    b.Property<string>("PSDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PSName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PSId");

                    b.ToTable("ProgramSizes");

                    b.HasData(
                        new
                        {
                            PSId = 1,
                            PSDescription = "up to thousands of random discount codes designed for single use by a limited group customers (e.g., \"ACME - 5P13E\" gives $25 off for the first 3 purchases, new customers from Warsaw only).",
                            PSName = "Bulk codes"
                        },
                        new
                        {
                            PSId = 2,
                            PSDescription = "A fixed-code discount designed for multiple uses (e.g., 10% off with \"blackfriday\" code).",
                            PSName = "Standalone code"
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.RuleGift", b =>
                {
                    b.Property<int>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleId"), 1L, 1);

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("ChooseDayForWeeklyOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDateRD")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftAmount")
                        .HasColumnType("int");

                    b.Property<int>("GiftId")
                        .HasColumnType("int");

                    b.Property<bool?>("MonthlyOnDay")
                        .HasColumnType("bit");

                    b.Property<int?>("Probability")
                        .HasColumnType("int");

                    b.Property<bool?>("RepeatDaily")
                        .HasColumnType("bit");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectDayForMonthlyOnDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDateRD")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("WeeklyOn")
                        .HasColumnType("bit");

                    b.HasKey("RuleId");

                    b.HasIndex("GiftId");

                    b.ToTable("RuleGifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.TypeOfBusiness", b =>
                {
                    b.Property<int>("TOBId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TOBId"), 1L, 1);

                    b.Property<string>("TOBName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TOBId");

                    b.ToTable("TypeOfBusinesses");

                    b.HasData(
                        new
                        {
                            TOBId = 1,
                            TOBName = "Khách sạn"
                        },
                        new
                        {
                            TOBId = 2,
                            TOBName = "Nhà hàng"
                        },
                        new
                        {
                            TOBId = 3,
                            TOBName = "Quán ăn"
                        },
                        new
                        {
                            TOBId = 4,
                            TOBName = "Bán sỉ"
                        },
                        new
                        {
                            TOBId = 5,
                            TOBName = "Resort"
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Winner", b =>
                {
                    b.Property<int>("WinnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WinnerId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("GiftCodeId")
                        .HasColumnType("int");

                    b.Property<bool>("SendGift")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WinDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WinnerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GiftCodeId");

                    b.ToTable("Winners");

                    b.HasData(
                        new
                        {
                            WinnerId = 1,
                            CustomerId = 1,
                            GiftCodeId = 3,
                            SendGift = true,
                            WinDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2457)
                        },
                        new
                        {
                            WinnerId = 2,
                            CustomerId = 2,
                            GiftCodeId = 4,
                            SendGift = false,
                            WinDate = new DateTime(2022, 6, 23, 6, 34, 33, 499, DateTimeKind.Local).AddTicks(2458)
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Barcode", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Campaign", "Campaign")
                        .WithMany("Barcodes")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.Charset", "Charset")
                        .WithMany("Barcodes")
                        .HasForeignKey("CharsetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Charset");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Campaign", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Charset", "Charset")
                        .WithMany("Campaigns")
                        .HasForeignKey("CharsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.ProgramSize", "ProgramSize")
                        .WithMany("Campaigns")
                        .HasForeignKey("ProgramSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charset");

                    b.Navigation("ProgramSize");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Customer", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Position", "Position")
                        .WithMany("Customers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.TypeOfBusiness", "TypeOfBusiness")
                        .WithMany("Customers")
                        .HasForeignKey("TOBId");

                    b.Navigation("Position");

                    b.Navigation("TypeOfBusiness");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.CustomerBarcode", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Barcode", "Barcode")
                        .WithMany("CustomerBarcodes")
                        .HasForeignKey("BarcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.Customer", "Customer")
                        .WithMany("CustomerBarcodes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barcode");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Gift", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Campaign", "Campaign")
                        .WithMany("Gifts")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.Product", "Product")
                        .WithMany("Gifts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.GiftCode", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Gift", "Gift")
                        .WithMany("GiftCodes")
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gift");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.RuleGift", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Gift", "Gift")
                        .WithMany("ruleGifts")
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gift");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Winner", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Customer", "Customer")
                        .WithMany("Winners")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.GiftCode", "GiftCode")
                        .WithMany("Winners")
                        .HasForeignKey("GiftCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("GiftCode");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Barcode", b =>
                {
                    b.Navigation("CustomerBarcodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Campaign", b =>
                {
                    b.Navigation("Barcodes");

                    b.Navigation("Gifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Charset", b =>
                {
                    b.Navigation("Barcodes");

                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Customer", b =>
                {
                    b.Navigation("CustomerBarcodes");

                    b.Navigation("Winners");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Gift", b =>
                {
                    b.Navigation("GiftCodes");

                    b.Navigation("ruleGifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.GiftCode", b =>
                {
                    b.Navigation("Winners");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Position", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Product", b =>
                {
                    b.Navigation("Gifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.ProgramSize", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.TypeOfBusiness", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
