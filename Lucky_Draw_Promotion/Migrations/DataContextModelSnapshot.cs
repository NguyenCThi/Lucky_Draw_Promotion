// <auto-generated />
using System;
using Lucky_Draw_Promotion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lucky_Draw_Promotion.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordChangeString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("AdminId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Email = "cooledm123@gmail.com",
                            FullName = "Nguyen Chinh Thi",
                            PasswordHash = new byte[] { 137, 70, 33, 115, 198, 86, 96, 26, 40, 13, 12, 123, 40, 71, 12, 119, 124, 40, 231, 201, 247, 150, 5, 233, 223, 83, 81, 229, 239, 225, 253, 130, 147, 222, 171, 218, 183, 94, 31, 134, 8, 40, 16, 208, 19, 39, 102, 8, 247, 157, 132, 34, 84, 247, 146, 69, 77, 95, 81, 15, 27, 5, 170, 228 },
                            PasswordSalt = new byte[] { 110, 221, 110, 80, 104, 36, 41, 61, 86, 95, 165, 29, 92, 167, 166, 157, 159, 224, 77, 246, 240, 152, 225, 58, 10, 12, 225, 4, 31, 56, 227, 34, 129, 95, 160, 94, 107, 249, 54, 109, 185, 77, 15, 228, 58, 185, 97, 23, 237, 199, 59, 75, 86, 56, 104, 138, 59, 117, 208, 123, 213, 240, 185, 175, 148, 204, 101, 106, 150, 170, 177, 40, 190, 174, 53, 208, 112, 189, 82, 146, 239, 18, 183, 238, 233, 159, 20, 245, 127, 130, 64, 19, 106, 160, 242, 75, 147, 64, 90, 230, 138, 165, 215, 76, 234, 246, 155, 170, 223, 32, 141, 89, 244, 58, 216, 241, 50, 44, 109, 150, 144, 193, 28, 48, 250, 108, 14, 190 }
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Barcode", b =>
                {
                    b.Property<int>("BarcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarcodeId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BarcodePic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("CodeCount")
                        .HasColumnType("int");

                    b.Property<int>("CodeLength")
                        .HasColumnType("int");

                    b.Property<int>("CodeRedemptionLimit")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Postfix")
                        .HasColumnType("int");

                    b.Property<int?>("Prefix")
                        .HasColumnType("int");

                    b.Property<string>("QRCodePic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Scanned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScannedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Unlimited")
                        .HasColumnType("bit");

                    b.Property<bool>("UsedForSpin")
                        .HasColumnType("bit");

                    b.HasKey("BarcodeId");

                    b.HasIndex("CampaignId");

                    b.ToTable("Barcodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"), 1L, 1);

                    b.Property<bool>("ApplyForAllCampaign")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoUpdate")
                        .HasColumnType("bit");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharsetId")
                        .HasColumnType("int");

                    b.Property<int>("CodeCount")
                        .HasColumnType("int");

                    b.Property<int>("CodeLength")
                        .HasColumnType("int");

                    b.Property<int>("CodeUsageLimit")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OnlyJoinOne")
                        .HasColumnType("bit");

                    b.Property<string>("Postfix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramSizeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Unlimited")
                        .HasColumnType("bit");

                    b.HasKey("CampaignId");

                    b.HasIndex("CharsetId");

                    b.HasIndex("ProgramSizeId");

                    b.ToTable("Campaigns");

                    b.HasData(
                        new
                        {
                            CampaignId = 1,
                            ApplyForAllCampaign = false,
                            AutoUpdate = false,
                            CampaignName = "Lucky Draw 1",
                            CharsetId = 1,
                            CodeCount = 1,
                            CodeLength = 10,
                            CodeUsageLimit = 1,
                            Description = "This is for test",
                            EndDate = new DateTime(2022, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OnlyJoinOne = false,
                            Prefix = "ALTA",
                            ProgramSizeId = 1,
                            StartDate = new DateTime(2022, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Unlimited = false
                        },
                        new
                        {
                            CampaignId = 2,
                            ApplyForAllCampaign = true,
                            AutoUpdate = false,
                            CampaignName = "Lucky Draw 2",
                            CharsetId = 1,
                            CodeCount = 1,
                            CodeLength = 10,
                            CodeUsageLimit = 1,
                            Description = "This is the second test",
                            EndDate = new DateTime(2022, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OnlyJoinOne = false,
                            Prefix = "ALTA",
                            ProgramSizeId = 2,
                            StartDate = new DateTime(2022, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Unlimited = false
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Charset", b =>
                {
                    b.Property<int>("CharsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharsetId"), 1L, 1);

                    b.Property<string>("CharsetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharsetValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharsetId");

                    b.ToTable("Charsets");

                    b.HasData(
                        new
                        {
                            CharsetId = 1,
                            CharsetName = "Numbers",
                            CharsetValue = "123456789"
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("TOBId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("PositionId");

                    b.HasIndex("TOBId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Block = true,
                            DateOfBirth = new DateTime(1973, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Nguyễn Hữu Huân",
                            Location = "Quận 6, TPHCM",
                            PhoneNumber = "0901456781",
                            PositionId = 1,
                            TOBId = 1
                        },
                        new
                        {
                            CustomerId = 2,
                            Block = true,
                            DateOfBirth = new DateTime(1974, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Nguyễn Trọng Hữu",
                            Location = "Quận 5, TPHCM",
                            PhoneNumber = "0907852781",
                            PositionId = 2,
                            TOBId = 2
                        },
                        new
                        {
                            CustomerId = 3,
                            Block = true,
                            DateOfBirth = new DateTime(1975, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Trần Hùng Phát",
                            Location = "Quận 7, TPHCM",
                            PhoneNumber = "0901485381",
                            PositionId = 3,
                            TOBId = 3
                        },
                        new
                        {
                            CustomerId = 4,
                            Block = true,
                            DateOfBirth = new DateTime(1976, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Lê Ngọc Anh",
                            Location = "Bến Lức, Long An",
                            PhoneNumber = "0901451981",
                            PositionId = 1,
                            TOBId = 4
                        },
                        new
                        {
                            CustomerId = 5,
                            Block = true,
                            DateOfBirth = new DateTime(1977, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Lê Phan",
                            Location = "Biên Hòa, Đồng Nai",
                            PhoneNumber = "0901742681",
                            PositionId = 2,
                            TOBId = 3
                        },
                        new
                        {
                            CustomerId = 6,
                            Block = false,
                            DateOfBirth = new DateTime(1978, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Nguyễn Thị Ngọc Hương",
                            Location = "Bến Lức, Long An",
                            PhoneNumber = "0904803457",
                            PositionId = 1,
                            TOBId = 3
                        },
                        new
                        {
                            CustomerId = 7,
                            Block = false,
                            DateOfBirth = new DateTime(1979, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Trần Văn Tình",
                            Location = "Cai Lậy, Tiền Giang",
                            PhoneNumber = "0947514514",
                            PositionId = 1,
                            TOBId = 5
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.CustomerBarcode", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("BarcodeId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "BarcodeId");

                    b.HasIndex("BarcodeId");

                    b.ToTable("CustomerBarcodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Gift", b =>
                {
                    b.Property<int>("GiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftId"), 1L, 1);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("GiftId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ProductId");

                    b.ToTable("Gifts");

                    b.HasData(
                        new
                        {
                            GiftId = 1,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(441),
                            ProductId = 1
                        },
                        new
                        {
                            GiftId = 2,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(450),
                            ProductId = 2
                        },
                        new
                        {
                            GiftId = 3,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(451),
                            ProductId = 3
                        },
                        new
                        {
                            GiftId = 4,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(452),
                            ProductId = 4
                        },
                        new
                        {
                            GiftId = 5,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(453),
                            ProductId = 5
                        },
                        new
                        {
                            GiftId = 6,
                            CampaignId = 1,
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(453),
                            ProductId = 6
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.GiftCode", b =>
                {
                    b.Property<int>("GiftCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftCodeId"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftId")
                        .HasColumnType("int");

                    b.HasKey("GiftCodeId");

                    b.HasIndex("GiftId");

                    b.ToTable("GiftCodes");

                    b.HasData(
                        new
                        {
                            GiftCodeId = 1,
                            Active = true,
                            ActiveDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(472),
                            Code = "ALTA231453",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(471),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 2,
                            Active = true,
                            ActiveDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(474),
                            Code = "ALTA546375",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(474),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 3,
                            Active = true,
                            ActiveDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(475),
                            Code = "ALTA111212",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(475),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 4,
                            Active = false,
                            Code = "ALTA215223",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(476),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 5,
                            Active = false,
                            Code = "ALTA512311",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(480),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 6,
                            Active = false,
                            Code = "ALTA734521",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(481),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 7,
                            Active = false,
                            Code = "ALTA346222",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(482),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 8,
                            Active = false,
                            Code = "ALTA890231",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(482),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 9,
                            Active = false,
                            Code = "ALTA888769",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(483),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 10,
                            Active = false,
                            Code = "ALTA909878",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(484),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 11,
                            Active = false,
                            Code = "ALTA999231",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(484),
                            GiftId = 1
                        },
                        new
                        {
                            GiftCodeId = 12,
                            Active = false,
                            Code = "ALTA118908",
                            CreatedDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(485),
                            GiftId = 1
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"), 1L, 1);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            PositionName = "Chủ"
                        },
                        new
                        {
                            PositionId = 2,
                            PositionName = "Quản lý"
                        },
                        new
                        {
                            PositionId = 3,
                            PositionName = "Bếp"
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductDescription = "Hạt nêm Knorr Chay Nấm Hương 400g",
                            ProductName = "Hạt nêm Knorr Chay Nấm Hương 400g"
                        },
                        new
                        {
                            ProductId = 2,
                            ProductDescription = "Hạt nêm Knorr Từ Thịt Thăn, Xương Ống & Tủy 600gr",
                            ProductName = "Hạt nêm Knorr Từ Thịt Thăn, Xương Ống & Tủy 600gr"
                        },
                        new
                        {
                            ProductId = 3,
                            ProductDescription = "Gia vị Hoàn Chỉnh Knorr Canh Chua 30g",
                            ProductName = "Gia vị Hoàn Chỉnh Knorr Canh Chua 30g"
                        },
                        new
                        {
                            ProductId = 4,
                            ProductDescription = "Xốt Nêm Knorr Đậm Đặc Từ Thịt Vị Heo 240g",
                            ProductName = "Xốt Nêm Knorr Đậm Đặc Từ Thịt Vị Heo 240g"
                        },
                        new
                        {
                            ProductId = 5,
                            ProductDescription = "Hạt Nêm Knorr Đậm Đặc Từ Thịt Thăn, Xương Ống & Tủy 900gr",
                            ProductName = "Hạt Nêm Knorr Đậm Đặc Từ Thịt Thăn, Xương Ống & Tủy 900gr"
                        },
                        new
                        {
                            ProductId = 6,
                            ProductDescription = "Knorr Natural Bột Nêm Tự Nhiên Vị Rau Củ 150g",
                            ProductName = "Knorr Natural Bột Nêm Tự Nhiên Vị Rau Củ 150g"
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.ProgramSize", b =>
                {
                    b.Property<int>("PSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PSId"), 1L, 1);

                    b.Property<string>("PSDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PSName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PSId");

                    b.ToTable("ProgramSizes");

                    b.HasData(
                        new
                        {
                            PSId = 1,
                            PSDescription = "up to thousands of random discount codes designed for single use by a limited group customers (e.g., \"ACME - 5P13E\" gives $25 off for the first 3 purchases, new customers from Warsaw only).",
                            PSName = "Bulk codes"
                        },
                        new
                        {
                            PSId = 2,
                            PSDescription = "A fixed-code discount designed for multiple uses (e.g., 10% off with \"blackfriday\" code).",
                            PSName = "Standalone code"
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.RuleGift", b =>
                {
                    b.Property<int>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleId"), 1L, 1);

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("ChooseDayForWeeklyOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDateRD")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftAmount")
                        .HasColumnType("int");

                    b.Property<int>("GiftId")
                        .HasColumnType("int");

                    b.Property<bool?>("MonthlyOnDay")
                        .HasColumnType("bit");

                    b.Property<int?>("Probability")
                        .HasColumnType("int");

                    b.Property<bool?>("RepeatDaily")
                        .HasColumnType("bit");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectDayForMonthlyOnDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDateRD")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("WeeklyOn")
                        .HasColumnType("bit");

                    b.HasKey("RuleId");

                    b.HasIndex("GiftId");

                    b.ToTable("RuleGifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.TypeOfBusiness", b =>
                {
                    b.Property<int>("TOBId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TOBId"), 1L, 1);

                    b.Property<string>("TOBName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TOBId");

                    b.ToTable("TypeOfBusinesses");

                    b.HasData(
                        new
                        {
                            TOBId = 1,
                            TOBName = "Khách sạn"
                        },
                        new
                        {
                            TOBId = 2,
                            TOBName = "Nhà hàng"
                        },
                        new
                        {
                            TOBId = 3,
                            TOBName = "Quán ăn"
                        },
                        new
                        {
                            TOBId = 4,
                            TOBName = "Bán sỉ"
                        },
                        new
                        {
                            TOBId = 5,
                            TOBName = "Resort"
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Winner", b =>
                {
                    b.Property<int>("WinnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WinnerId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("GiftCodeId")
                        .HasColumnType("int");

                    b.Property<bool>("SendGift")
                        .HasColumnType("bit");

                    b.Property<DateTime>("WinDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WinnerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GiftCodeId");

                    b.ToTable("Winners");

                    b.HasData(
                        new
                        {
                            WinnerId = 1,
                            CustomerId = 1,
                            GiftCodeId = 3,
                            SendGift = true,
                            WinDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(588)
                        },
                        new
                        {
                            WinnerId = 2,
                            CustomerId = 2,
                            GiftCodeId = 4,
                            SendGift = false,
                            WinDate = new DateTime(2022, 6, 17, 7, 40, 0, 269, DateTimeKind.Local).AddTicks(589)
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Barcode", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Campaign", "Campaign")
                        .WithMany("Barcodes")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Campaign", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Charset", "Charset")
                        .WithMany("Campaigns")
                        .HasForeignKey("CharsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.ProgramSize", "ProgramSize")
                        .WithMany("Campaigns")
                        .HasForeignKey("ProgramSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charset");

                    b.Navigation("ProgramSize");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Customer", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Position", "Position")
                        .WithMany("Customers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.TypeOfBusiness", "TypeOfBusiness")
                        .WithMany("Customers")
                        .HasForeignKey("TOBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("TypeOfBusiness");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.CustomerBarcode", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Barcode", "Barcode")
                        .WithMany("CustomerBarcodes")
                        .HasForeignKey("BarcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.Customer", "Customer")
                        .WithMany("CustomerBarcodes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barcode");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Gift", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Campaign", "Campaign")
                        .WithMany("Gifts")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.Product", "Product")
                        .WithMany("Gifts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.GiftCode", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Gift", "Gift")
                        .WithMany("GiftCodes")
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gift");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.RuleGift", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Gift", "Gift")
                        .WithMany("ruleGifts")
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gift");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Winner", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Customer", "Customer")
                        .WithMany("Winners")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.GiftCode", "GiftCode")
                        .WithMany("Winners")
                        .HasForeignKey("GiftCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("GiftCode");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Barcode", b =>
                {
                    b.Navigation("CustomerBarcodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Campaign", b =>
                {
                    b.Navigation("Barcodes");

                    b.Navigation("Gifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Charset", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Customer", b =>
                {
                    b.Navigation("CustomerBarcodes");

                    b.Navigation("Winners");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Gift", b =>
                {
                    b.Navigation("GiftCodes");

                    b.Navigation("ruleGifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.GiftCode", b =>
                {
                    b.Navigation("Winners");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Position", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Product", b =>
                {
                    b.Navigation("Gifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.ProgramSize", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.TypeOfBusiness", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
