// <auto-generated />
using System;
using Lucky_Draw_Promotion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lucky_Draw_Promotion.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220609083505_CreateInitial")]
    partial class CreateInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordChangeString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("AdminId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Email = "cooledm123@gmail.com",
                            FullName = "Nguyen Chinh Thi",
                            PasswordHash = new byte[] { 84, 93, 21, 212, 135, 95, 90, 72, 201, 116, 201, 104, 152, 29, 119, 241, 209, 69, 170, 151, 100, 45, 195, 74, 161, 135, 75, 190, 252, 183, 52, 194, 110, 117, 231, 128, 39, 224, 106, 254, 146, 34, 75, 85, 88, 59, 15, 113, 113, 162, 31, 114, 117, 108, 126, 255, 83, 248, 189, 200, 42, 119, 242, 128 },
                            PasswordSalt = new byte[] { 247, 102, 208, 126, 143, 168, 182, 234, 215, 213, 92, 96, 162, 201, 109, 57, 179, 154, 136, 228, 130, 57, 204, 171, 45, 249, 128, 88, 65, 231, 164, 193, 238, 166, 177, 173, 144, 96, 68, 246, 211, 135, 212, 190, 122, 157, 191, 195, 12, 184, 77, 34, 120, 169, 206, 203, 251, 140, 177, 240, 254, 26, 128, 6, 136, 135, 217, 15, 141, 121, 78, 63, 218, 78, 103, 207, 223, 250, 64, 196, 204, 110, 117, 155, 140, 198, 199, 86, 108, 228, 163, 108, 40, 237, 137, 233, 131, 123, 14, 125, 113, 8, 84, 7, 91, 38, 52, 151, 206, 244, 153, 67, 251, 209, 229, 134, 196, 89, 234, 1, 107, 52, 78, 226, 22, 19, 113, 84 }
                        });
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Barcode", b =>
                {
                    b.Property<int>("BarcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BarcodeId"), 1L, 1);

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("BarcodePic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("CodeCount")
                        .HasColumnType("int");

                    b.Property<int>("CodeLength")
                        .HasColumnType("int");

                    b.Property<int>("CodeRedemptionLimit")
                        .HasColumnType("int");

                    b.Property<int>("CreatedDate")
                        .HasColumnType("int");

                    b.Property<int>("ExpiredDate")
                        .HasColumnType("int");

                    b.Property<int>("Postfix")
                        .HasColumnType("int");

                    b.Property<int>("Prefix")
                        .HasColumnType("int");

                    b.Property<string>("QRCodePic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Scanned")
                        .HasColumnType("int");

                    b.Property<int>("ScannedDate")
                        .HasColumnType("int");

                    b.Property<int>("Unlimited")
                        .HasColumnType("int");

                    b.Property<int>("UsedForSpin")
                        .HasColumnType("int");

                    b.HasKey("BarcodeId");

                    b.HasIndex("CampaignId");

                    b.ToTable("Barcodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"), 1L, 1);

                    b.Property<int>("ApplyForAllCampaign")
                        .HasColumnType("int");

                    b.Property<int>("AutoUpdate")
                        .HasColumnType("int");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CharsetId")
                        .HasColumnType("int");

                    b.Property<int>("CodeCount")
                        .HasColumnType("int");

                    b.Property<int>("CodeLength")
                        .HasColumnType("int");

                    b.Property<int>("CodeUsageLimit")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Postfix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramSizeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Unlimited")
                        .HasColumnType("int");

                    b.HasKey("CampaignId");

                    b.HasIndex("CharsetId");

                    b.HasIndex("ProgramSizeId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Charset", b =>
                {
                    b.Property<int>("CharsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharsetId"), 1L, 1);

                    b.Property<string>("CharsetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharsetValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharsetId");

                    b.ToTable("Charsets");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<int>("Block")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("TOBId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("PositionId");

                    b.HasIndex("TOBId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.CustomerBarcode", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("BarcodeId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "BarcodeId");

                    b.HasIndex("BarcodeId");

                    b.ToTable("CustomerBarcodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Gift", b =>
                {
                    b.Property<int>("GiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftId"), 1L, 1);

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("GiftId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ProductId");

                    b.ToTable("Gifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.GiftCode", b =>
                {
                    b.Property<int>("GiftCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiftCodeId"), 1L, 1);

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GiftId")
                        .HasColumnType("int");

                    b.HasKey("GiftCodeId");

                    b.HasIndex("GiftId");

                    b.ToTable("GiftCodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionId"), 1L, 1);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.ProgramSize", b =>
                {
                    b.Property<int>("PSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PSId"), 1L, 1);

                    b.Property<string>("PSDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PSName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PSId");

                    b.ToTable("ProgramSizes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.TypeOfBusiness", b =>
                {
                    b.Property<int>("TOBId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TOBId"), 1L, 1);

                    b.Property<string>("TOBName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TOBId");

                    b.ToTable("TypeOfBusinesses");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Winner", b =>
                {
                    b.Property<int>("WinnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WinnerId"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("GiftCodeId")
                        .HasColumnType("int");

                    b.Property<int>("SendGift")
                        .HasColumnType("int");

                    b.Property<DateTime>("WinDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WinnerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GiftCodeId");

                    b.ToTable("Winners");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Barcode", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Campaign", "Campaign")
                        .WithMany("Barcodes")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Campaign", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Charset", "Charset")
                        .WithMany("Campaigns")
                        .HasForeignKey("CharsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.ProgramSize", "ProgramSize")
                        .WithMany("Campaigns")
                        .HasForeignKey("ProgramSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charset");

                    b.Navigation("ProgramSize");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Customer", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Position", "Position")
                        .WithMany("Customers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.TypeOfBusiness", "TypeOfBusiness")
                        .WithMany("Customers")
                        .HasForeignKey("TOBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("TypeOfBusiness");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.CustomerBarcode", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Barcode", "Barcode")
                        .WithMany("CustomerBarcodes")
                        .HasForeignKey("BarcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.Customer", "Customer")
                        .WithMany("CustomerBarcodes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barcode");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Gift", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Campaign", "Campaign")
                        .WithMany("Gifts")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.Product", "Product")
                        .WithMany("Gifts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.GiftCode", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Gift", "Gift")
                        .WithMany("GiftCodes")
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gift");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Winner", b =>
                {
                    b.HasOne("Lucky_Draw_Promotion.Models.Customer", "Customer")
                        .WithMany("Winners")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Draw_Promotion.Models.GiftCode", "GiftCode")
                        .WithMany("Winners")
                        .HasForeignKey("GiftCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("GiftCode");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Barcode", b =>
                {
                    b.Navigation("CustomerBarcodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Campaign", b =>
                {
                    b.Navigation("Barcodes");

                    b.Navigation("Gifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Charset", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Customer", b =>
                {
                    b.Navigation("CustomerBarcodes");

                    b.Navigation("Winners");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Gift", b =>
                {
                    b.Navigation("GiftCodes");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.GiftCode", b =>
                {
                    b.Navigation("Winners");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Position", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.Product", b =>
                {
                    b.Navigation("Gifts");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.ProgramSize", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("Lucky_Draw_Promotion.Models.TypeOfBusiness", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
